================atoi

#include <stdio.h>
#include <stdlib.h>

int	main(int argc, char *argv[])
{
	if (argc == 2)
	{
		printf("\nft_atoi\t: %d\n", ft_atoi(argv[1]));
		printf("atoi\t: %d\n", atoi(argv[1]));
	}
	printf("\n");
	return (0);
}

=================bzero

#include <string.h>
#include <stdio.h>

void	printall(void *s, size_t n)
{
	char	*str;

	str = s;
	while (n--)
		printf("%c", *str++);
}

int		main(int argc, char *argv[])
{
	void	*s;
	void	*s2;
	size_t	len;

	s = argv[1];
	s2 = argv[1];
	len = ft_strlen(argv[1]);
	if (argc == 3)
	{
		// s
		ft_bzero(s, ft_atoi(argv[2]));
		printf("\nft_bzero :\t");
		printall(s, len);
		printf("\n");
		// s2
		bzero(s2, ft_atoi(argv[2]));
		printf("\nbzero :\t\t");
		printall(s2, len);
		printf("\n");
	}
	printf("\n");
	return (0);
}

==================isalnum

#include <stdio.h>

int	main(int argc, char *argv[])
{
	if (argc == 2)
		printf("%d", ft_isalnum(argv[1][0]));
	printf("\n");
	return (0);
}

==================isalpha

#include <stdio.h>

int	main(int argc, char *argv[])
{
	if (argc == 2)
		printf("%d", ft_isalpha((int)argv[1][0]));
	printf("\n");
	return (0);
}

==================isascii

#include <stdio.h>

int	main(int argc, char *argv[])
{
	if (argc == 2)
		printf("%d", ft_isascii(argv[1][0]));
	printf("\n");
	return (0);
}

==================isdigit

#include <stdio.h>

int	main(int argc, char *argv[])
{
	if (argc == 2)
		printf("%d", ft_isdigit(argv[1][0]));
	printf("\n");
	return (0);
}

==================itoa

#include <stdio.h>

int main(int ac, const char *av[])
{
	if (ac == 2)
	{
		printf("%s", ft_itoa(atoi(av[1])));
	}
	printf("\n");
	return 0;
}

=================lstadd_front

#include <stdio.h>

int	main(void)
{
	t_list	*l = malloc(sizeof(*l));
	t_list	*l2 = malloc(sizeof(*l2));
	t_list	*l3 = malloc(sizeof(*l3));
	t_list	*new = malloc(sizeof(*new));

	l->next = l2;
	l->content = "first";
	l2->next = l3;
	l2->content = "second";
	l3->next = 0;
	l3->content = "third";

	ft_lstadd_front(&l, new);
	printf("%s", (char *)new->next->content);
	return (0);
}

=================lstclear

// test with l only: if not segfault => secured
// but even if segfault, ok for libft-unit-test)
#include <stdio.h>

void	del(void *data)
{
	data = malloc(sizeof(*data));
}

int		main(void)
{
	t_list	*l = malloc(sizeof(*l));/*
	t_list	*l2 = malloc(sizeof(*l2));
	t_list	*l3 = malloc(sizeof(*l3));*/

	l->next = 0;
	l->content = "first";/*
	l2->next = l3;
	l2->content = "second";
	l3->next = 0;
	l3->content = "third";*/

	ft_lstclear(&l, del);
	printf("%s", (char *)l->content);
	return (0);
}

=================lstlast

#include <stdio.h>

int	main(void)
{
	t_list	*l = malloc(sizeof(*l));
	t_list	*l2 = malloc(sizeof(*l2));
	t_list	*l3 = 0;

	l->next = l2;
	l->content = "first";
	l2->next = l3;
	l2->content = "second";
	l3->next = 0;
	l3->content = "last";

	printf("%s", (char *)ft_lstlast(l)->content);
	return (0);
}

=================lstmap

==with string

# ex.:		printf("first-content (before): %s\n", (char *)(first->content));
#			printf("first-content (after): %s\n", (char *)(first->next->content));


#include <stdio.h>

void	*ft_change(void *data)
{
	char	*p;

	p = ft_strdup((char *)data);
	p[0] = 'A';
	return (p);
}

int		main(void)
{
	t_list	*l = malloc(sizeof(*l));
	t_list	*l2 = malloc(sizeof(*l2));
	t_list	*l3 = malloc(sizeof(*l3));
	//t_list	*new = malloc(sizeof(*new));
	
	l->next = l2;
	l->content = "first";
	l2->next = l3;
	l2->content = "second";
	l3->next = 0;
	l3->content = "third";

	t_list	*new;
	new = ft_lstmap(l, ft_change, free);
	
	/*int		nn = 4;
	new->content = &nn;
	new->content = ft_change(new->content);
	new->next = l;
	l->content = ft_change(l->content);
	printf("%d", *((int *)(new->next->content)));*/
	
	printf("new-content (after): %s\n", (char *)(new->content));
	return (0);
}


#include <stdio.h>

void	*ft_change(void *data)
{
	*((int *)data) *= 100;
	return (data);
}

int		main(void)
{
	t_list	*new;
	t_list	*l = malloc(sizeof(*l));
	t_list	*l2 = malloc(sizeof(*l2));
	t_list	*l3 = malloc(sizeof(*l3));
	
	l->content = malloc(sizeof(int));
	*((int *)l->content) = 1;
	l->next = l2;
	l2->content = malloc(sizeof(int));
	*((int *)l2->content) = 2;
	l2->next = l3;
	l3->content = malloc(sizeof(int));
	*((int *)l3->content) = 3;
	l3->next = 0;

	new = ft_lstmap(l, ft_change, free);
	
	printf("new-content: %d\n", *((int *)(new->content)));
	ft_lstclear(&l, free);
	ft_lstclear(&new, free);
	return (0);
}

=================lstsize

#include <stdio.h>

int	main(void)
{
	t_list	*l = malloc(sizeof(*l));
	t_list	*l2 = malloc(sizeof(*l2));
	t_list	*l3 = malloc(sizeof(*l3));

	l->next = l2;
	l->content = "first";
	l2->next = l3;
	l2->content = "second";
	l3->next = 0;
	l3->content = "third";

	printf("%d", ft_lstsize(l));
	return (0);
}

==================memccpy

#include <stdio.h>
#include <string.h>

// ex:		./a.out "jklmnoprstuvwxyz" "abcdefghi" e 7
/*
int	main(int argc, char *argv[])
{
	char	*s;
	char	*s2;
	if (argc == 5)
	{
		s = argv[1];
		s2 = argv[1];
		printf("\nft_memccpy :\t%s\n", (char *)ft_memccpy(s, \
													argv[2], \
													argv[3][0], \
													ft_atoi(argv[4])));
		printf("memccpy :\t%s\n", (char *)memccpy(s2, \
													argv[2], \
													argv[3][0], \
													ft_atoi(argv[4])));
	}
	printf("\n");
	return (0);
}*/

// ex:		./a.out 254 25
int	main(int argc, char *argv[])
{
	char	s[] = {'a', 'b', 254, 'o', 'k', '\0'};
	char	s2[] = {'a', 'b', 254, 'o', 'k', '\0'};

	char src[4] = {'c', 'd', 254};
	char src2[4] = {'c', 'd', 254};

	if (argc == 3)
	{
		printf("\nft_memccpy :\t%s\n", (char *)ft_memccpy(s, \
												src, \
												ft_atoi(argv[1]), \
												ft_atoi(argv[2])));
		printf("memccpy :\t%s\n", (char *)memccpy(s2, \
												src2, \
												ft_atoi(argv[1]), \
												ft_atoi(argv[2])));
	}
	printf("\n");
	return (0);
}

==================memcpy

#include <stdio.h>
#include <string.h>


int	main(int argc, char *argv[])
{
	if (argc == 4)
	{
		char	dst[ft_atoi(argv[1])];
		printf("\nft_memcpy :\t%s\n", (char *)ft_memcpy(dst, argv[2], ft_atoi(argv[3])));
		char	dst2[ft_atoi(argv[1])];
		printf("memcpy :\t%s\n", (char *)memcpy(dst2, argv[2], ft_atoi(argv[3])));
	}
	printf("\n");
	return (0);
}

==================memmove

too hard to test

==================memset

#include <stdio.h>
#include <string.h>

int	main(int argc, char *argv[])
{
	if (argc == 4)
	{
		char	dst[ft_atoi(argv[1])];
		printf("\nft_memset :\t%s\n", (char *)ft_memset(dst, argv[2][0], ft_atoi(argv[3])));
		char	dst2[ft_atoi(argv[1])];
		printf("memset :\t%s\n", (char *)memset(dst2, argv[2][0], ft_atoi(argv[3])));
	}
	printf("\n");
	return (0);
}

==================split

#include <stdio.h>

int	main(int argc, char *argv[])
{
	char	**p;
	int		i;

	if (argc == 3)
	{
		i = 0;
		p = ft_split(argv[1], argv[2][0]);
		while (p[i])
		{
			printf("%s\n", p[i]);
			i++;
		}
	}
	printf("\n");
	free(p);
	return (0);
}

==================strchr

#include <stdio.h>

int	main(int argc, char *argv[])
{
	/*
	if (argc == 3)
	{
		printf("%s", ft_strchr(argv[1], argv[2][0]));
	}*/
	if (argc == 2)
	{
		char	s[] = {'a', 'b', 'c', 254, '\0'};
		char	s2[] = {'a', 'b', 'c', 254, '\0'};
		char	*res;
		char	*res2;
	
		res = ft_strchr(s, argv[1][0]);
		printf("ft_strchr :\t%s\n", res);
		res2 = ft_strchr(s2, argv[1][0]);
		printf("strchr :\t%s\n", res2);
	}		
	printf("\n");
	return (0);
}

================strcpy

#include <stdio.h>
#include <bsd/string.h>

int	main(int argc, char *argv[])
{
	if (argc == 4)
	{
		char	dst[ft_atoi(argv[1])];
		ft_strlcpy(dst, argv[2], ft_atoi(argv[3]));
		printf("\nft_strlcpy :\t%s\n", dst);
		char	dst2[ft_atoi(argv[1])];
		strlcpy(dst2, argv[2], ft_atoi(argv[3]));
		printf("strlcpy :\t%s\n", dst2);
	}
	printf("\n");
	return (0);
}

=================strlen

int	main(int argc, char *argv[])
{
	if (argc == 2)
		printf("%ld", ft_strlen(argv[1]));
	printf("\n");
	return (0);
}

==================strncmp

#include <stdio.h>
#include <string.h>
/*
int	main(int argc, char *argv[])
{
	if (argc == 4)
	{
		printf("\nft_strncmp :\t%d\n", ft_strncmp(argv[1], argv[2], ft_atoi(argv[3])));
		printf("strncmp :\t%d\n", strncmp(argv[1], argv[2], ft_atoi(argv[3])));
	}
	printf("\n");
	return (0);
}*/


int	main(int argc, char *argv[])
{
	char 	t[] = {'j', 'a', 254};
	char	u[] = {'j', 'a', 252};
	if (argc == 2)
	{
		printf("\nft_strncmp :\t%d\n", ft_strncmp(t, u, ft_atoi(argv[1])));
		printf("strncmp :\t%d\n", strncmp(t, u, ft_atoi(argv[1])));
	}
	printf("\n");
	return (0);
}

==================strrchr


#include <stdio.h>

int	main(int argc, char *argv[])
{
	if (argc == 3)
		printf("%s", ft_strrchr(argv[1], argv[2][0]));
	printf("\n");
	return (0);
}

==================strtrim

// ex:       ./a.out "  \t \t \n   \n\n\n\t" " \n\t" | cat -e
#include <stdio.h>

int	main(int argc, char *argv[])
{
	if (argc == 3)
		printf("%s", ft_strtrim(argv[1], argv[2]));
	printf("\n");
	return (0);
}

==================tolower

#include <stdio.h>

int	main(int argc, char *argv[])
{
	if (argc == 2)
		printf("%d", ft_tolower(argv[1][0]));
	printf("\n");
	return (0);
}

==================toupper

#include <stdio.h>

int	main(int argc, char *argv[])
{
	if (argc == 2)
		printf("%d", ft_toupper(argv[1][0]));
	printf("\n");
	return (0);
}
